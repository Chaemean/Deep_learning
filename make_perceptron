import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap

class Perceptron():
    def __init__(self, tol=1e-3, random_state=0, eta = 0.01, epochs=500):
        self.tol = tol
        self.random_state = random_state
        self.eta = eta
        self.epochs = epochs

    def step_func(self, t):
        if t > self.tol: return 1
        else: return 0

    def fit(self, X, y):  #X에 1로 구성된 열 붙여줘야함

        rgen = np.random.RandomState(self.random_state)  #random_state를 시드로 갖는 랜덤 생성기

        # rgen.normal = 정규 분포를 따르는 난수 생성, loc:평균, scale:표준편차, size:생성할 난수의 개수
        self.W = rgen.normal(loc=0, scale=0.01, size=1+X.shape[1])  #X의 특성수+1(bias)만큼 랜덤한 가중치 설정

        self.errors_ = [] #에포크에따른 오류 변화를 알아보기 위해

        for t in range(self.epochs):
            errors = 0
            for i in range(len(X)):
                update = self.eta * (y[i] - self.step_func(np.dot(X[i], self.W[1:]) + self.W[0]))
                self.W[1:] += update * X[i]
                self.W[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def predict(self, X):
        predictions = []

        for x in X:
            pred = self.step_func(np.dot(x, self.W[1:])+self.W[0])
            predictions.append(pred)
        return np.array(predictions)




#만든 퍼셉트론으로 iris 학습, 예측 
iris = datasets.load_iris()

X = iris.data   #특징
y = iris.target #정답

#세 종류의 붓꽃 그래프
plt.scatter(X[:50, 0],X[:50,1], c='red', marker = 'o', label = 'setosa') #setosa 그래프에 그림, x축=꽃받침 길이, y축 = 꽃받침 너비
plt.scatter(X[50:100, 0],X[50:100,1], c='blue', marker = 'x', label = 'versicolor')
#plt.scatter(X[100:150, 0],X[100:150,1], c='orange', marker = '*', label = 'virginica')

plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.legend(loc='upper right')
plt.show()


X = X[:100, [0,1]]
y = y[:100]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=3)  #훈련용/테스트용 분류
clf = Perceptron(epochs=500)
clf.fit(X_train, y_train)

# 테스트 데이터 예측
y_pred = clf.predict(X_test)


#<에포크에따른 수정비율>
# 그래프
plt.plot(range(1, len(clf.errors_) + 1), clf.errors_)
plt.legend(['Perceptron errors'], loc = 'upper right')
plt.xlabel('Epoch', fontsize = 10)
plt.ylabel('Number of errors', fontsize = 10)
plt.show()


#<시각화>
# 색상 맵
cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#0000FF'])

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max()+1  #x축 꽃받침 길이
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max()+1  #y축 꽃받침 너비

# 격자 포인트 생성
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02))

# 격자 포인트에 대한 예측값 계산
Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

# 결과를 색상 맵으로 표시
Z = Z.reshape(xx.shape)
plt.figure()
plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

# 예측  시각화
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_pred, cmap=cmap_bold, edgecolor='k', s=20)
plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.title("Perceptron classification (sepal width - petal width)")
plt.xlabel('Sepal width')
plt.ylabel('Petal width')
plt.show()

# 정답 시각화
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cmap_bold, edgecolor='k', s=20)
plt.xlim(X[:, 0].min() - 1, X[:, 0].max() + 1)
plt.ylim(X[:, 1].min() - 1, X[:, 1].max() + 1)
plt.title("Test data (sepal width vs petal width)")
plt.xlabel('Sepal width')
plt.ylabel('Petal width')
plt.show()




